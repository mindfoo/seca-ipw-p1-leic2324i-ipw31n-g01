// Do some swagger stuff... with OpenAPI

openapi: 3.0.1
info:
  title: Events API
  description: This is a simple Events API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:3000/

tags:
- name: Events
- name: Groups
- name: Users

paths:
  /users:
    post:
      tags:
      - users
      summary: adds a user
      description: Adds a user to the system
      operationId: addUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: false
      responses:
        201:
          description: user created
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
      x-codegen-request-body-name: user
  /events:
    get:
      tags:
      - Events
      summary: get Events
      description: By passing in the appropriate options, you can search for available
        Events
      operationId: getEvents
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: q
        in: query
        description: pass an optional search string for looking up Events with that  text
        schema:
          type: string
      - name: skip
        in: query
        description: number of records to skip for pagination
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: maximum number of records to return
        schema:
          maximum: 50
          minimum: 0
          type: integer
      responses:
        200:
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        400:
          description: bad input parameter
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
    post:
      tags:
      - Events
      summary: adds a event
      description: Adds a event to the system
      operationId: addEvent
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Event to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
        required: false
      responses:
        201:
          description: Event created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/NewEventCreated'
        400:
          description: Invalid input, object invalid
          content: {}
  /events/{eventId}:
    get:
      tags:
      - Events
      summary: Get a event given its id
      description: Get a event given its id
      operationId: getEventById
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        schema:
          type: string
          format: uuid
      - name: eventId
        in: path
        description: ID of event that to be fetched
        required: true
        schema:
          type: integer
          minimum: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Invalid ID supplied
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: Invalid ID supplied
        404:
          description: Event not found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/InvalidRequest'
                example: Event Not found
    put:
      tags:
      - Events
      summary: updates a event
      description: Updates a Event in the system
      operationId: updateEvent
      security:
        - bearerAuth: []
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
          format: uuid
      - name: eventId
        in: path
        description: ID of the event to be deleted
        required: true
        schema:
          type: integer
      requestBody:
        description: Event to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
        required: false
      responses:
        201:
          description: event updated
          content: {}
        404:
          description: Event not found
          content: {}
    delete:
      tags:
      - Events
      summary: Delete a event by ID
      description: Delete a event by ID
      operationId: deleteEvent
      security:
        - bearerAuth: []
      parameters:
      - name: eventId
        in: path
        description: ID of the event to be deleted
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Event not found
          content: {}
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    Event:
      required:
      - id
      - title
      - userId
      
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Study HTTP
        description:
          type: string
          example: Event description
        userId:
          type: integer
    NewEvent:
      required:
      - title
      - userId
      type: object
      properties:
        title:
          type: string
          example: Study Http
        description:
          type: string
          example: Event description
        userId:
          type: integer
    NewUser:
      required:
      - userName
      type: object
      properties:
        userName:
          type: string
          example: joao
    InvalidRequest:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    NewEventCreated:
      required:
      - status
      - event
      type: object
      properties:
        status:
          type: string
          example: Event with id 123 created with success
        event:
          $ref: '#/components/schemas/Event'